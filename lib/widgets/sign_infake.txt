

import "../provider/auth.dart";

import "../widgets/sign_up.dart";

import "../screens/tabs_screen.dart";

//enum AuthMode { Signup, Login }

class SignIn extends StatefulWidget {

  static const routeName = "auth-screen";

  const SignIn({Key? key}) : super(key: key);

  @override

  _SignInState createState() => _SignInState();

}

class _SignInState extends State<SignIn> {

  final GlobalKey<FormState> _formKey = GlobalKey();

  var _isLoading = false;

  Map<String, String> _authData = {

    'email': '',

    'password': '',

  };

  void _showErrorDialog(String message) {

    showDialog(

        context: context,

        builder: (ctx) => AlertDialog(title: const Text("An Error Occurred"), content: Text(message), actions: [

              TextButton(

                  child: const Text("Okay"),

                  onPressed: () {

                    Navigator.of(ctx).pop();

                  })

            ]));

  }

  Future<void> _submits() async {

    if (!_formKey.currentState!.validate()) {

      // Invalid!

      return;

    }

    _formKey.currentState?.save();

    setState(() {

      _isLoading = true;

    });

    try {

      await Provider.of<Auth>(context, listen: false).signIn(

        _authData["email"].toString(),

        _authData["password"].toString(),

      );

    } on HttpException catch (error) {

      var errorMessage = "Authentication failed";

      if (error.toString().contains("EMAIL_EXISTS")) {

        errorMessage = "This email address is already in use";

      } else if (error.toString().contains("INVALID_EMAIL")) {

        errorMessage = "This is to a valid email address";

      } else if (error.toString().contains("WEAK_PASSWORD")) {

        errorMessage = "This password is too weak";

      } else if (error.toString().contains("EMAIL_NOT_FOUND")) {

        errorMessage = "Could not find a user with that email";

      } else if (error.toString().contains("INVALID_PASSWORD")) {

        errorMessage = "Invalid password";

      }

      _showErrorDialog(errorMessage);

    } catch (error) {

      _showErrorDialog(errorMessage);

    }

    setState(() {

      _isLoading = false;

    });

  }

  @override

  Widget build(BuildContext context) {

    final mediaQuery = MediaQuery.of(context);

    final isLandscape = MediaQuery.of(context).orientation == Orientation.landscape;

    final theme = Theme.of(context);

    return Center ("Sign In");

        

  }

}